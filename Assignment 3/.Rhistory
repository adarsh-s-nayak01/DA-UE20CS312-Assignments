#reading the csv file.
df <- read.csv('sales.csv')
head(df)
#print(df)
sales <- df$Sales
head(sales)
sales_ts <- ts(sales, frequency = 52, start=c(2010, 2, 5))
sales_ts
plot.ts(sales_ts)
install.packages("forecast")
library(forecast)
#Decomposing a seasonal time series means separating the time series into these three components
tsA<- decompose(sales_ts,"additive")
plot(tsA)
library(forecast)
tsM<- decompose(sales_ts,"multiplicative")
plot(tsM)
#reading the csv file.
df <- read.csv('sales.csv')
head(df)
#print(df)
sales <- df$Sales
head(sales)
sales_ts <- ts(sales, frequency = 52, start=c(2010, 2, 5))
sales_ts
plot.ts(sales_ts)
install.packages("forecast")
library(forecast)
#Decomposing a seasonal time series means separating the time series into these three components
tsA<- decompose(sales_ts,"additive")
plot(tsA)
library(forecast)
tsM<- decompose(sales_ts,"multiplicative")
plot(tsM)
seas<- tsA$seasonal
plot(seas)
tre<-tsA$trend
plot(tre)
ran<-tsA$random
plot(ran)
#function "ses" gives out the "simple exponential smoothing"
ses<-ses(sales_ts)
#plotting SES
plot(ses)
#for double exponential smoothing we use HOlt's linear method.
Hts <- ts(sales, frequency = 12, start=2010)
#the alpha -> smoothness parameter for the level (trend-less series), we have a beta parameter which controls the smoothness of the trend component.
HoltModel <- holt(Hts, h=6, alpha=0.2, beta=0.1)
summary(HoltModel)
plot(HoltModel)
#
HWModelA <- hw(Hts, h=12, alpha=0.2, beta=0.1, gamma=0.25, seasonal =
"additive")
summary(HWModelA)
plot(HWModelA)
HWModelM <- hw(Hts, h=12, alpha=0.2, beta=0.1, gamma=0.25, seasonal =
"multiplicative")
summary(HWModelM)
plot(HWModelM)
#dev.new(width=400, height=250, unit="px")
plot(ses,col="green")
par(new=TRUE)
plot(HoltModel,col="blue")
par(new=TRUE)
plot(HWModelA, col="orange" )
sales_lm <- lm(sales~ Holiday_Flag + Temperature + Fuel_Price + CPI + Unemployment + Laptop_Demand , data=df)
sales_lm%>% summary()
##obtaining the predicted values.
library(tidyverse)
explan_sales<-tibble(df)
#head(explan_sales)
predict(sales_lm,explan_sales)
#now let's plot the predicted values against the observed or the original values.
plot(predict(sales_lm), df$sales,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0, b = 1, lwd=2,
col = "green")
ts1 <- ts(df$Laptop_Demand, frequency = 12, start = 2012)
plot(ts1)
tsdA1 <- decompose(ts1, "additive")
plot(tsdA1)
tsdM1 <- decompose(ts1, "multiplicative")
plot(tsdM1)
#USING CROSTON MODEL
Cts <- ts(df$Laptop_Demand, frequency = 12, start = 2010)
plot(Cts)
CrostonModel <- croston(Cts, h=4, alpha=0.2)
summary(CrostonModel)
plot(CrostonModel)
#lets take a summary of the "Holt Model".
summary(HoltModel)
summary(HWModelA)
summary(ses)
install.packages("forecast")
##obtaining the predicted values.
library(tidyverse)
explan_sales<-tibble(df)
#head(explan_sales)
predict(sales_lm,explan_sales)
##obtaining the predicted values.
library(tidyverse)
explan_sales<-tibble(df)
head(explan_sales)
predict(sales_lm,explan_sales)
#reading the csv file.
df <- read.csv('sales.csv')
head(df)
#print(df)
sales <- df$Sales
head(sales)
sales_ts <- ts(sales, frequency = 52, start=c(2010, 2, 5))
sales_ts
plot.ts(sales_ts)
install.packages("forecast")
library(forecast)
#Decomposing a seasonal time series means separating the time series into these three components
tsA<- decompose(sales_ts,"additive")
plot(tsA)
library(forecast)
tsM<- decompose(sales_ts,"multiplicative")
plot(tsM)
seas<- tsA$seasonal
plot(seas)
tre<-tsA$trend
plot(tre)
ran<-tsA$random
plot(ran)
#function "ses" gives out the "simple exponential smoothing"
ses<-ses(sales_ts)
#plotting SES
plot(ses)
#for double exponential smoothing we use HOlt's linear method.
Hts <- ts(sales, frequency = 12, start=2010)
#the alpha -> smoothness parameter for the level (trend-less series), we have a beta parameter which controls the smoothness of the trend component.
HoltModel <- holt(Hts, h=6, alpha=0.2, beta=0.1)
summary(HoltModel)
plot(HoltModel)
#
HWModelA <- hw(Hts, h=12, alpha=0.2, beta=0.1, gamma=0.25, seasonal =
"additive")
summary(HWModelA)
plot(HWModelA)
HWModelM <- hw(Hts, h=12, alpha=0.2, beta=0.1, gamma=0.25, seasonal =
"multiplicative")
summary(HWModelM)
plot(HWModelM)
#dev.new(width=400, height=250, unit="px")
plot(ses,col="green")
par(new=TRUE)
plot(HoltModel,col="blue")
par(new=TRUE)
plot(HWModelA, col="orange" )
sales_lm <- lm(sales~ Holiday_Flag + Temperature + Fuel_Price + CPI + Unemployment + Laptop_Demand , data=df)
sales_lm%>% summary()
##obtaining the predicted values.
library(tidyverse)
explan_sales<-tibble(df)
head(explan_sales)
predict(sales_lm,explan_sales)
#now let's plot the predicted values against the observed or the original values.
plot(predict(sales_lm), df$sales,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0, b = 1, lwd=2,
col = "green")
ts1 <- ts(df$Laptop_Demand, frequency = 12, start = 2012)
plot(ts1)
tsdA1 <- decompose(ts1, "additive")
plot(tsdA1)
tsdM1 <- decompose(ts1, "multiplicative")
plot(tsdM1)
#USING CROSTON MODEL
Cts <- ts(df$Laptop_Demand, frequency = 12, start = 2010)
plot(Cts)
CrostonModel <- croston(Cts, h=4, alpha=0.2)
summary(CrostonModel)
plot(CrostonModel)
#lets take a summary of the "Holt Model".
summary(HoltModel)
summary(HWModelA)
summary(ses)
library(tidyverse)
library(corrplot)
library(olsrr)
library(ggpubr)
library(dplyr)
library(ggplot2)
library(broom)
library(car)
library(tidyverse)
library(corrplot)
library(olsrr)
library(ggpubr)
library(dplyr)
library(ggplot2)
library(broom)
library(car)
spotify_df <- read_csv('spotify.csv')
